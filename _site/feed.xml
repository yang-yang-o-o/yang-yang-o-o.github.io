<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-01-19T16:49:09+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Yang Yang</title><entry><title type="html">Denoising Diffusion Implicit Models</title><link href="http://localhost:4000/Denoising-Diffusion-Probabilistic-Models/" rel="alternate" type="text/html" title="Denoising Diffusion Implicit Models" /><published>2022-12-18T22:25:00+08:00</published><updated>2022-12-18T22:25:00+08:00</updated><id>http://localhost:4000/Denoising%20Diffusion%20Probabilistic%20Models</id><content type="html" xml:base="http://localhost:4000/Denoising-Diffusion-Probabilistic-Models/">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yang-yang-o-o/yang-yang-o-o.github.io/main/assets\Blog\DDPM\2022-12-20-Denoising_Diffusion_Probabilistic_Models.png&quot; alt=&quot;Denoising Diffusion Implicit Models&quot; style=&quot;display: block; margin: auto; width: 90%;&quot; /&gt;&lt;/p&gt;

&lt;!-- &lt;img src=&quot;..\assets\Blog\DDPM\2022-12-20-Denoising_Diffusion_Probabilistic_Models.png&quot; alt=&quot;Denoising Diffusion Implicit Models&quot; style=&quot;display: block; margin: auto; width: 90%;&quot;&gt; --&gt;</content><author><name></name></author><category term="blog" /><category term="DL" /><summary type="html"></summary></entry><entry><title type="html">Variational Autoencoder</title><link href="http://localhost:4000/Variational-Autoencoder/" rel="alternate" type="text/html" title="Variational Autoencoder" /><published>2022-12-18T22:25:00+08:00</published><updated>2022-12-18T22:25:00+08:00</updated><id>http://localhost:4000/Variational%20Autoencoder</id><content type="html" xml:base="http://localhost:4000/Variational-Autoencoder/">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yang-yang-o-o/yang-yang-o-o.github.io/main/assets\Blog\VAE\2022-12-19-Variational_Autoencoder.png&quot; alt=&quot;Variational Autoencoder&quot; style=&quot;display: block; margin: auto; width: 90%;&quot; /&gt;&lt;/p&gt;

&lt;!-- &lt;img src=&quot;..\assets\Blog\VAE\2022-12-19-Variational_Autoencoder.png&quot; alt=&quot;Denoising Diffusion Implicit Models&quot; style=&quot;display: block; margin: auto; width: 90%;&quot;&gt; --&gt;</content><author><name></name></author><category term="blog" /><category term="DL" /><summary type="html"></summary></entry><entry><title type="html">Perspective-n-Point (PnP)</title><link href="http://localhost:4000/Perspective-n-Point/" rel="alternate" type="text/html" title="Perspective-n-Point (PnP)" /><published>2022-12-18T22:25:00+08:00</published><updated>2022-12-18T22:25:00+08:00</updated><id>http://localhost:4000/Perspective-n-Point</id><content type="html" xml:base="http://localhost:4000/Perspective-n-Point/">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yang-yang-o-o/yang-yang-o-o.github.io/main/assets/images/2022-12-18-Perspective-n-Point.png&quot; alt=&quot;Markdowm Image&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="SLAM" /><summary type="html"></summary></entry><entry><title type="html">Tmux</title><link href="http://localhost:4000/Tmux/" rel="alternate" type="text/html" title="Tmux" /><published>2022-11-04T22:48:00+08:00</published><updated>2022-11-04T22:48:00+08:00</updated><id>http://localhost:4000/Tmux</id><content type="html" xml:base="http://localhost:4000/Tmux/">&lt;h3 id=&quot;1tmux简介&quot;&gt;1、Tmux简介&lt;/h3&gt;

&lt;p&gt;Tmux 就是会话与窗口的”解绑/绑定”工具。会话是用户与计算机之间的临时交互，与进程对应。窗口是接收/反馈输入输出的界面，例如一个terminal窗口，可以输入指令和显示指令执行结果。如果会话和窗口绑定了，那么关闭窗口，会话及其对应的进程都将被关闭。反之解绑后，即使窗口被误关闭，会话及其进程依然继续存在运行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Ubuntu 或 Debian&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tmux

&lt;span class=&quot;c&quot;&gt;# CentOS 或 Fedora&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tmux

&lt;span class=&quot;c&quot;&gt;# Mac&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tmux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;启动和退出&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 自动新建一个会话和窗口并进入&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux

&lt;span class=&quot;c&quot;&gt;# 退出当前窗口并删除窗口和会话，或Ctrl+d&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;前缀键（prefix）&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;默认前缀键为Ctrl+b，可以修改&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tmux 的一些特点：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;允许单个terminal中管理和访问多个会话，即可以同时运行和管理多个命令行程序
在列出的会话中选择一个接入，即会创建一个新的窗口和所选择的会话绑定。&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
&lt;img src=&quot;https://github.com/yang-yang-o-o/yang-yang-o-o.github.io/blob/main/assets/tmux/tmux-1.png?raw=true&quot; width=&quot;90%&quot; height=&quot;90%&quot; /&gt;
&lt;/center&gt;
&lt;ul&gt;
  &lt;li&gt;允许一个会话同时被多个terminal访问，允许一个会话包含多个窗口。前者可以实现多人实时共享会话，后者可以扩充一个会话的可操作范围&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
&lt;img src=&quot;https://github.com/yang-yang-o-o/yang-yang-o-o.github.io/blob/main/assets/tmux/tmux-2.png?raw=true&quot; width=&quot;90%&quot; height=&quot;90%&quot; /&gt;
&lt;/center&gt;
&lt;ul&gt;
  &lt;li&gt;允许一个窗口被任意水平和垂直拆分为多个窗格，每个窗格都可作为一个独立的终端执行指令。&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
&lt;img src=&quot;https://github.com/yang-yang-o-o/yang-yang-o-o.github.io/blob/main/assets/tmux/tmux-3.png?raw=true&quot; width=&quot;90%&quot; height=&quot;90%&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;2会话session&quot;&gt;2、会话（session）&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 新建会话&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux new &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &amp;lt;session-name&amp;gt; &lt;span class=&quot;c&quot;&gt;# tmux外使用&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux &lt;span class=&quot;c&quot;&gt;# tmux外使用，默认名称0、1、2，依次递推&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 分离会话，退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux detach &lt;span class=&quot;c&quot;&gt;# tmux内使用&lt;/span&gt;
  Ctrl+b d &lt;span class=&quot;c&quot;&gt;# tmux内使用&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 显示所有会话&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#或者 tmux list-session，tmux外使用&lt;/span&gt;
  Ctrl+b s  &lt;span class=&quot;c&quot;&gt;# tmux内使用，可以快速切换会话&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 接入会话&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux attach &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;session-name&amp;gt; &lt;span class=&quot;c&quot;&gt;# tmux外使用&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux a &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;session-name&amp;gt; &lt;span class=&quot;c&quot;&gt;# tmux外使用&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 杀死会话&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux kill-session &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;session-name&amp;gt; &lt;span class=&quot;c&quot;&gt;# tmux外使用&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 切换会话&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux switch &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;session-name&amp;gt; &lt;span class=&quot;c&quot;&gt;# tmux内使用&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 重命名会话&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux rename-session &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; 0 &amp;lt;new-name&amp;gt;   &lt;span class=&quot;c&quot;&gt;# 将0号会话重命名。tmux外使用&lt;/span&gt;
  Ctrl+b &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# tmux内使用&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3窗口window&quot;&gt;3、窗口（window）&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 新建窗口&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux new-window &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &amp;lt;window-name&amp;gt; &lt;span class=&quot;c&quot;&gt;# tmux内使用&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 切换窗口&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-window&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;window-name&amp;gt; &lt;span class=&quot;c&quot;&gt;# tmux 内使用&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 重命名窗口&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux rename-window &amp;lt;new-name&amp;gt; &lt;span class=&quot;c&quot;&gt;# tmux 内使用&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 窗口快捷键，tmux内使用&lt;/span&gt;
  Ctrl+b c：创建一个新窗口，状态栏会显示多个窗口的信息。
  Ctrl+b p：切换到上一个窗口（按照状态栏上的顺序）。
  Ctrl+b n：切换到下一个窗口。
  Ctrl+b &amp;lt;number&amp;gt;：切换到指定编号的窗口，其中的&amp;lt;number&amp;gt;是状态栏上的窗口编号。
  Ctrl+b w：显示所有窗口的列表，可从中选择进入某个窗口。
  Ctrl+b ,：重命名当前窗口。

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4窗格pane&quot;&gt;4、窗格（pane）&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 划分窗格&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; 划分上下两个窗格
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux split-window &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 快捷键 Ctrl+b &quot; &lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; 划分左右两个窗格
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux split-window &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 快捷键 Ctrl+b %&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 移动光标&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-pane&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 光标切换到上方窗格&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-pane&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 光标切换到下方窗格&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-pane&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 光标切换到左边窗格&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-pane&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 光标切换到右边窗格&lt;/span&gt;

  Ctrl+b &amp;lt;arrow key&amp;gt; &lt;span class=&quot;c&quot;&gt;# 快捷键&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 交换窗格位置&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; 当前窗格上移（和上一个窗格交换）
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux swap-pane &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 快捷键 Ctrl+b {&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; 当前窗格下移（和下一个窗格交换）
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux swap-pane &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 快捷键 Ctrl+b }&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 窗格快捷键&lt;/span&gt;
  Ctrl+b Ctrl+o：所有窗格向前移动一个位置，第一个窗格变成最后一个窗格。
  Ctrl+b Alt+o：所有窗格向后移动一个位置，最后一个窗格变成第一个窗格。
  Ctrl+b x：关闭当前窗格。
  Ctrl+b &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;：将当前窗格拆分为一个独立窗口。
  Ctrl+b z：当前窗格全屏显示，再使用一次会变回原来大小。
  Ctrl+b Ctrl+&amp;lt;arrow key&amp;gt;：按箭头方向调整窗格大小。
  Ctrl+b q：显示窗格编号。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5其他命令&quot;&gt;5、其他命令&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 列出所有快捷键，及其对应的 Tmux 命令&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux list-keys

&lt;span class=&quot;c&quot;&gt;# 列出所有 Tmux 命令及其参数&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux list-commands

&lt;span class=&quot;c&quot;&gt;# 列出当前所有 Tmux 会话的信息，tmux内使用&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux info

&lt;span class=&quot;c&quot;&gt;# 查看Tmux版本&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 重新加载当前的 Tmux 配置，tmux外使用&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux source-file ~/.tmux.conf

&lt;span class=&quot;c&quot;&gt;# 鼠标翻页&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; 方式一
  Ctrl+b &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;: 进入翻页状态，滚动鼠标翻页，q 退出翻页状态。xshell中 &lt;span class=&quot;nb&quot;&gt;shift&lt;/span&gt;+鼠标滚轮 即可直接翻页

  &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt; 方式二，更改后右键粘贴有问题，复制粘贴需使用 ctrl+shift+c/v
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;set-option -g mouse on&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.tmux.conf &lt;span class=&quot;c&quot;&gt;# &amp;gt;&amp;gt;为追加，&amp;gt;为覆盖&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tmux source-file ~/.tmux.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5保存和加载会话&quot;&gt;5、保存和加载会话&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;安装插件：&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加配置到~/.tmux.conf文件：&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @plugin &lt;span class=&quot;s1&quot;&gt;&apos;tmux-plugins/tpm&apos;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @plugin &lt;span class=&quot;s1&quot;&gt;&apos;tmux-plugins/tmux-resurrect&apos;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @plugin &lt;span class=&quot;s1&quot;&gt;&apos;tmux-plugins/tmux-continuum&apos;&lt;/span&gt;
  ​
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @continuum-save-interval &lt;span class=&quot;s1&quot;&gt;&apos;15&apos;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @continuum-restore &lt;span class=&quot;s1&quot;&gt;&apos;on&apos;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @resurrect-capture-pane-contents &lt;span class=&quot;s1&quot;&gt;&apos;on&apos;&lt;/span&gt;
  ​
  &lt;span class=&quot;c&quot;&gt;# Other config ...&lt;/span&gt;
  ​
  run &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;~/.tmux/plugins/tpm/tpm&apos;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;重新加载配置文件：&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  tmux &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.tmux.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装插件：&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# 在tmux内使用快捷键安装插件，安装后可以即可使用保存和加载会话功能&lt;/span&gt;
  Ctrl+b I
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;保存和加载会话快捷键&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;c&quot;&gt;# 保存会话&lt;/span&gt;
  Ctrl+b Ctrl+s
  &lt;span class=&quot;c&quot;&gt;# 加载会话&lt;/span&gt;
  Ctrl+b Ctrl+r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/10/tmux.html&quot;&gt;Tmux 使用教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/146544540&quot;&gt;自动保存Tmux会话&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/hxxjxw/article/details/118275482&quot;&gt;Tmux 启动鼠标翻页&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="blog" /><category term="Linux" /><summary type="html">1、Tmux简介</summary></entry><entry><title type="html">Linear Kalman filter</title><link href="http://localhost:4000/Linear-kalman-filter/" rel="alternate" type="text/html" title="Linear Kalman filter" /><published>2022-09-11T22:48:00+08:00</published><updated>2022-09-11T22:48:00+08:00</updated><id>http://localhost:4000/Linear%20kalman%20filter</id><content type="html" xml:base="http://localhost:4000/Linear-kalman-filter/">&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/yang-yang-o-o/yang-yang-o-o.github.io/main/assets/images/2016-02-24-kalman.png&quot; alt=&quot;Markdowm Image&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="SLAM" /><summary type="html"></summary></entry><entry><title type="html">Git</title><link href="http://localhost:4000/git/" rel="alternate" type="text/html" title="Git" /><published>2022-02-26T22:48:00+08:00</published><updated>2022-02-26T22:48:00+08:00</updated><id>http://localhost:4000/git</id><content type="html" xml:base="http://localhost:4000/git/">&lt;h2 id=&quot;git-basics&quot;&gt;git basics&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 在指定的目录下创建一个空的repo，不带参数则在当前目录下创建&lt;/span&gt;
git init &amp;lt;directory&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 克隆一个指定的repo到本地&lt;/span&gt;
git clone &amp;lt;repo&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 针对当前repo配置用户名，使用--global参数将配置全局用户名&lt;/span&gt;
git config user.name &amp;lt;name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 将指定目录的所有修改加入到下一次commit中，把&amp;lt;directory&amp;gt;换成&amp;lt;file&amp;gt;将添加指定文件的修改&lt;/span&gt;
git add &amp;lt;directory&amp;gt;
git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 提交暂存区的修改，使用指定的&amp;lt;message&amp;gt;作为提交信息&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 如果&amp;lt;message&amp;gt;里没有空格，可以不用引号，有空格必须加引号，如果有单引号，外面就用双引号，如果有双引号，外面就用单引号&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;message&amp;gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 显示哪些文件已被staged、未被staged以及untracked。&lt;/span&gt;
git status

&lt;span class=&quot;c&quot;&gt;# 以默认格式显示commit历史&lt;/span&gt;
git log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-diff&quot;&gt;git diff&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 比较工作区和暂存区的修改&lt;/span&gt;
git diff 

&lt;span class=&quot;c&quot;&gt;# 比较工作区和上一次commit后的修改&lt;/span&gt;
git diff HEAD

&lt;span class=&quot;c&quot;&gt;# 比较暂存区和上一次commit后的修改&lt;/span&gt;
git diff &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;undoing-changes&quot;&gt;undoing changes&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# 根据指定的&amp;lt;commit&amp;gt;创建一个新的undo的commit，并应用到当前的分支&lt;/span&gt;
git revert &amp;lt;commit&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 将&amp;lt;file&amp;gt;从暂存区移除，但保持工作区不变。此操作不会修改工作区的任何文件&lt;/span&gt;
git reset &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;rewriting-git-history&quot;&gt;rewriting git history&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 修改最近一次commit的&amp;lt;message&amp;gt;&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;--amend&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 将当前staged修改合并到最近一次的commit中，并更改message&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &amp;lt;message&amp;gt; &lt;span class=&quot;nt&quot;&gt;--amend&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 基于&amp;lt;base&amp;gt;对当前分支进行rebase，&amp;lt;base&amp;gt;可以是commit、分支名称、tag或者相对于HEAD的commit&lt;/span&gt;
git rebase &amp;lt;base&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 显示本地repo的所有commit日志&lt;/span&gt;
git reflog

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-branches&quot;&gt;git branches&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 显示本地repo的所有分支&lt;/span&gt;
git branch

&lt;span class=&quot;c&quot;&gt;# 创建名为name的分支&lt;/span&gt;
git branch &amp;lt;name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 创建并切换到一个新的名为&amp;lt;branch&amp;gt;的分支。去掉-c参数将切换到一个已有的分支&lt;/span&gt;
git switch &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &amp;lt;branch&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 将指定&amp;lt;branch&amp;gt;分支合并到当前分支，当合并分支发生冲突时，需要手动解决冲突，然后add和commit，才能完成合并&lt;/span&gt;
git merge &amp;lt;branch&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 指定 --no-ff参数来强制禁用 Fast forward模式，由于要生成一个新的commit，所以需要-m&lt;/span&gt;
git merge &lt;span class=&quot;nt&quot;&gt;--no-ff&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;merge with no-ff&quot;&lt;/span&gt; dev

&lt;span class=&quot;c&quot;&gt;# 切换分支，加-b参数可以创建新分支&lt;/span&gt;
git checkout &amp;lt;branch&amp;gt;
git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; dev origin/dev

&lt;span class=&quot;c&quot;&gt;# 建立本地分支和远程分支的关联&lt;/span&gt;
git branch &lt;span class=&quot;nt&quot;&gt;--set-upstream&lt;/span&gt; branch-name origin/branch-name

&lt;span class=&quot;c&quot;&gt;# 删除dev分支&lt;/span&gt;
git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;/D dev

&lt;span class=&quot;c&quot;&gt;# 将当前分支重命名&lt;/span&gt;
git branch &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &amp;lt;newname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;remote-repositories&quot;&gt;remote repositories&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 添加一个新的远程连接。添加后可使用&amp;lt;name&amp;gt;作为指定&amp;lt;url&amp;gt;远程连接的名称。&lt;/span&gt;
git remote add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 从指定&amp;lt;remote&amp;gt;抓取指定&amp;lt;branch&amp;gt;的所有commit到本地repo。去掉&amp;lt;branch&amp;gt;将抓取远程所有分支的修改。&lt;/span&gt;
git fetch &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 使用远程分支覆盖当前本地分支&lt;/span&gt;
git fetch
git reset &lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt; &amp;lt;remote&amp;gt;/&amp;lt;branch_name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 从指定&amp;lt;remote&amp;gt;抓取所有分支的commit并立刻合并到本地repo。&lt;/span&gt;
git pull &amp;lt;remote&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 将本地指定&amp;lt;branch&amp;gt;推送到指定远程&amp;lt;remote&amp;gt;。如果远程没有对应的分支，将自动在远程创建此分支。&lt;/span&gt;
git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-config&quot;&gt;git config&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 配置当前用户名，使用--global参数将针对当前系统登录用户生效，及对当前机器上的所有git repo 起效，也可以在某个git目录下单独指定不同的用户名和email，只需要去掉--global即可&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &amp;lt;name&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 配置当前用户Email。&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &amp;lt;email&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 配置一个git命令的快捷方式。例如:配置&quot;alias.glog log --graph --oneline”使&quot;git glog”相当于&quot;git log --graph --oneline&quot;.&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; alias.&amp;lt;alias-name&amp;gt; &amp;lt;git-command&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 配置文本编辑器，例如vi，在必要时自动打开此文本编辑器。&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt; core.editor &amp;lt;editor&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 打开当前用户的git全局配置并编辑。&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--edit&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 对命令行的输出增加颜色&lt;/span&gt;
git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; color.ui &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 每个git仓库的配置文件都放在.git/config文件中&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 当前用户的全局git配置文件放在~/.gitconfig文件中&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-log&quot;&gt;git log&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 限制log的显示数量。例如:”git log -5”仅显示最新5条commit。&lt;/span&gt;
git log -&amp;lt;limit&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 每行显示一条commit。&lt;/span&gt;
git log &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 按提交者名字搜索并显示commit。&lt;/span&gt;
git log &lt;span class=&quot;nt&quot;&gt;--author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;pattern&amp;gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 按指定内容搜索并显示commit。&lt;/span&gt;
git log &lt;span class=&quot;nt&quot;&gt;--grep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;pattern&amp;gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 显示指定范围的commit。范围参数可以是commit lD、分支名称、HEAD或任意相对位置。&lt;/span&gt;
git log &amp;lt;since&amp;gt;..&amp;lt;&lt;span class=&quot;k&quot;&gt;until&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 仅显示包含指定文件修改的commit。&lt;/span&gt;
git log &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &amp;lt;file&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 使用--graph参数显示图形化的branch信息。&lt;/span&gt;
git log &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 查看分支的合并情况&lt;/span&gt;
git log &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;oneline &lt;span class=&quot;nt&quot;&gt;--abbrev-commit&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 一行可视化查看所有的commit&lt;/span&gt;
git log &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;oneline &lt;span class=&quot;nt&quot;&gt;--abbrev-commit&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-reset&quot;&gt;git reset&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# 移除所有暂存区的修改，但不会修改工作区。&lt;/span&gt;
git reset

&lt;span class=&quot;c&quot;&gt;# 移除所有暂存区的修改，并强制删除所有工作区的修改。&lt;/span&gt;
git reset &lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 将当前分支回滚到指定&amp;lt;commit&amp;gt;，清除暂存区的修改，但保持工作区状态不变&lt;/span&gt;
git reset &amp;lt;commit&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 在git中，用HEAD指针指向上一次提交，也即单前的最新版本，可以通过reset来回退到上一次提交之后的代码状态，HEAD^指向上上次提交，HEAD^^指向上上上次提交，HEAD~100指向倒数第100个提交&lt;/span&gt;
git reset &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt;/soft] HEAD

&lt;span class=&quot;c&quot;&gt;# 把暂存区对file文件的修改撤销掉（unstage），重新放回工作区。&lt;/span&gt;
git reset HEAD &amp;lt;file&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 回退版本之后，如果想要回到未来，就需要知道未来的commit ID，ID都可以在git reflog里找到&lt;/span&gt;
git reset &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt;/soft] &amp;lt;commit ID&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 将当前分支回滚到指定&amp;lt;commit&amp;gt;，清除暂存区的修改，并强制删除所有工作区的修改。&lt;/span&gt;
git reset &lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt; &amp;lt;commit&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-rebase&quot;&gt;git rebase&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 以交互模式对当前分支做rebase。&lt;/span&gt;
• pick：保留该commit（缩写:p）
• reword：保留该commit，但需要修改该commit的注释（缩写:r）
• edit：保留该commit, 但要停下来修改该提交&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;不仅仅修改注释&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;（缩写:e），会跳转到一个临时分支，可以更改提交和更改注释，然后最后merge
• squash：将该commit和前一个commit合并（缩写:s）
• fixup：将该commit和前一个commit合并，但不保留该提交的注释信息（缩写:f）
• &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;：执行shell命令（缩写:x）
• drop：丢弃该commit（缩写:d）
git rebase &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &amp;lt;base&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-pull&quot;&gt;git pull&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 抓取所有远程分支，并以rebase模式并入本地repo而不是merge。&lt;/span&gt;
git pull &lt;span class=&quot;nt&quot;&gt;--rebase&lt;/span&gt; &amp;lt;remote&amp;gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-push&quot;&gt;git push&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 将本地分支推送到远程。使用--force 参数则直接用本地的更改替换远程的。&lt;/span&gt;
git push &amp;lt;remote&amp;gt; &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 使用push命令并不会自动将本地tag推送到远程。加上--tags参数会将所有本地tag推送到远程。&lt;/span&gt;
git push &amp;lt;remote&amp;gt; &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 将master分支的修改推送到远程仓库origin&lt;/span&gt;
git push origin master

&lt;span class=&quot;c&quot;&gt;# 将本地分支dbg_lichen_star推到远程仓库，并命名为dbg_lichen_star&lt;/span&gt;
git push origin dbg_lichen_star:dbg_lichen_star

&lt;span class=&quot;c&quot;&gt;# 删除名为dbg_lichen_star的远程分支&lt;/span&gt;
git push origin &lt;span class=&quot;nt&quot;&gt;--delete&lt;/span&gt; dbg_lichen_star
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-clean&quot;&gt;git clean&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 用来从你的工作目录中删除所有没有tracked过的文件&lt;/span&gt;
git clean

&lt;span class=&quot;c&quot;&gt;# 是一次clean的演习, 告诉你哪些文件会被删除. 记住他不会真正的删除文件, 只是一个提醒&lt;/span&gt;
git clean &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 删除当前目录下所有没有track过的文件. 他不会删除.gitignore文件里面指定的文件夹和文件, 不管这些文件有没有被track过&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# git reset --hard和git clean -f是一对好基友. 结合使用他们能让你的工作目录完全回退到最近一次commit的时候&lt;/span&gt;
git clean &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 删除指定路径下的没有被track过的文件&lt;/span&gt;
git clean &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &amp;lt;path&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 删除当前目录下没有被track过的文件和文件夹&lt;/span&gt;
git clean &lt;span class=&quot;nt&quot;&gt;-df&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 删除当前目录下所有没有track过的文件. 不管他是否是.gitignore文件里面指定的文件夹和文件&lt;/span&gt;
git clean &lt;span class=&quot;nt&quot;&gt;-xf&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-文件&quot;&gt;git 文件&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Git管理的文件分为：工作区，版本库，版本库又分为暂存区stage和暂存区分支master&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;仓库&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

工作区&amp;gt;&amp;gt;&amp;gt;&amp;gt;暂存区&amp;gt;&amp;gt;&amp;gt;&amp;gt;仓库

git add 把文件从工作区&amp;gt;&amp;gt;&amp;gt;&amp;gt;暂存区，git commit 把文件从暂存区&amp;gt;&amp;gt;&amp;gt;&amp;gt;仓库，

git diff 查看工作区和暂存区差异，

git diff &lt;span class=&quot;nt&quot;&gt;--cached&lt;/span&gt; 查看暂存区和仓库差异，

git diff HEAD 查看工作区和仓库的差异，

git add 的反向命令 git checkout ，撤销工作区修改，即把暂存区最新版本转移到工作区，

git commit 的反向命令 git reset HEAD ，就是把仓库最新版本转移到暂存区。

git diff 时是分为两种情况的：暂存区为空和暂存区不为空。

首先我们明确知道 git diff 是比较工作区和暂存区的文件的，如果此时暂存区为空，那么稍微有点不同，即：

1.暂存区为空使用 git diff ：因为此时暂存区为空，此时使用 git diff 同样也是比较工作区和仓库，即和使用 git diff HEAD 结果相同

2.暂存区不为空使用 git diff :因为此时暂存区不为空，此时使用 git diff 比较的就是工作区和暂存区
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-checkout&quot;&gt;git checkout&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 让这个文件回到最近一次git commit或git add时的状态&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 两种情况，一种是readme.txt自修改后还没有被 git add （放到暂存区），现在，撤销修改就回到修改之前的状态（上一次 git commit之后）；&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 一种是readme.txt已经 git add （添加到暂存区）后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态（上一次 git add 之后）。&lt;/span&gt;
git checkout &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; readme.txt

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-rm&quot;&gt;git rm&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 从版本库中删除该文件，然后需要 git commit 完成删除&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 如果误删，可以 git checkout 恢复&lt;/span&gt;
git &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;远程仓库&quot;&gt;远程仓库&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 本地生成SSH key，然后添加到Github

2. 关联本地仓库到远程，其中为远程仓库的命名origin可以自定义
git remote add origin git@github.com:michaelliao/learngit.git

&lt;span class=&quot;c&quot;&gt;# 查看已经关联的远程仓库信息&lt;/span&gt;
git remote &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 解除本地目录和远程origin仓库的连接&lt;/span&gt;
git remote &lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-stash&quot;&gt;git stash&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 暂存改动，用栈来保存，最新的暂存是stash@{0}&lt;/span&gt;
git stash

&lt;span class=&quot;c&quot;&gt;# 显示已暂存的所有改动&lt;/span&gt;
git stash list

&lt;span class=&quot;c&quot;&gt;# 恢复之前暂存的stash@{0}&lt;/span&gt;
git stash apply stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 删除之前暂存的stash@{0}&lt;/span&gt;
git stash drop stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 恢复之前暂存的stash@{0}，并删除stash@{0}&lt;/span&gt;
git stash pop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-cherry-pick&quot;&gt;git cherry-pick&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 从其他分支上复制一个更改到当前分支，避免重复劳动&lt;/span&gt;
git cherry-pick &amp;lt;commit &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;git-tag&quot;&gt;git tag&lt;/h2&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 标签（tag）是指向commit的死指针，分支是指向commit的活指针&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 为当前分支的当前最新的commit打一个v1.0的标签，也就是默认打到HEAD上&lt;/span&gt;
git tag v1.0

&lt;span class=&quot;c&quot;&gt;# 查看当前分支的所有标签&lt;/span&gt;
git tag 

&lt;span class=&quot;c&quot;&gt;# 给&amp;lt;commit id&amp;gt;打一个v0.9的标签&lt;/span&gt;
git tag v0.9 &amp;lt;commit &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# # 给&amp;lt;commit id&amp;gt;打一个v0.1的标签并附带message&lt;/span&gt;
git tag &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; v0.1 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;version 0.1 released&quot;&lt;/span&gt; &amp;lt;commit &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 查看标签信息&lt;/span&gt;
git show &amp;lt;tagname&amp;gt;

&lt;span class=&quot;c&quot;&gt;# 推送本地创建的v1.0标签到远程仓库&lt;/span&gt;
git push origin v1.0

&lt;span class=&quot;c&quot;&gt;# 推送本地创建的所有标签到远程仓库&lt;/span&gt;
git push origin &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 删除本地的v1.0标签&lt;/span&gt;
git tag &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; v0.1

&lt;span class=&quot;c&quot;&gt;# 删除远程仓库中的v1.0标签&lt;/span&gt;
git push origin :refs/tags/v0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;reference&lt;/h2&gt;

&lt;p&gt;http://git-scm.com&lt;/p&gt;

&lt;p&gt;https://git-scm.com/docs&lt;/p&gt;</content><author><name></name></author><category term="blog" /><category term="Linux" /><summary type="html">git basics</summary></entry></feed>